services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      # simple TCP check, no nc/telnet needed
      test: ["CMD-SHELL", "bash -lc 'echo > /dev/tcp/127.0.0.1/2181'"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  redis:
    image: redis:7
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  airflow:
    image: apache/airflow:2.10.2
    env_file: .env
    user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
    environment:
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      _PIP_ADDITIONAL_REQUIREMENTS: duckdb pandas pyarrow
    command: standalone
    ports:
      - "8081:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./data:/opt/airflow/data
      - ./logs:/opt/airflow/logs
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "airflow db check || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  mock_iot_edge:
    build: ./services/mock_iot_edge
    environment:
      KAFKA_BROKER: kafka:9092
      TOPIC: iot.telemetry
      DEVICE_COUNT: 30
      SEND_INTERVAL_MS: 500
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8000:8000"
    restart: unless-stopped

  stream_consumer:
    build: ./services/stream_consumer
    environment:
      KAFKA_BROKER: kafka:9092
      TOPIC: iot.telemetry
      REDIS_URL: redis://redis:6379/0
      OUT_DIR: /data/bronze
      ROTATE_MINUTES: 5
    volumes:
      - ./data:/data
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
